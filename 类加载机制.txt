何为类加载
	类加载是一种机制，他描述的是将字节码以文件形式加载到内存再经过连接、初始化后，最终形成可以被虚拟机直接使用的Java类型（也就是Class对象）地过程。
	总结：将字节码(如从.class中)，初始化到内存，并通过一系列操作，生成可以被虚拟机识别的Java类型对象。

类的生命周期：加载、使用、卸载。

类加载由3部分组成：
	1、加载（Loading）：主要负责将字节码加载到JVM内存，就是JVM的元数据区。加载时候使用双亲委派机制加载类。
	2、连接（Linking）：由三部分组成
		（1）检验（Verification）：文件格式验证、元数据验证、字节码验证和符号引用验证
		（2）准备（Preparation）：为类中的所有静态变量分配内存空间，并为其设置一个初始值（由于还没有产生对象，实例变量将不再此操作范围内）
		（3）解析（Resolution）：将常量池中所有的符号引用转为直接引用（得到类或者字段、方法在内存中的指针或者偏移量，以便直接调用该方法）。这个阶段可以在初始化之后再执行。
	3、初始化（Initialization）：初始化类变量和其他资源

加载：使用类加载器加载入内存

从虚拟机来讲只有两种不同的加载器：
		启动类加载器和其他加载器（全部继承自java.lang.ClassLoader）

4个级别的类加载器：
启动类加载器（Bootstrap ClassLoader）：
	负责将＜JAVA_HOME＞\lib目录中和-Xbootclasspath参数指定的目录中被虚拟机所识别(仅按名字识别)的类库加载到虚拟机。
	启动类加载器无法被Java程序直接引用。

扩展类加载器（Extension ClassLoader）：
	这个加载器由sun.misc.Launcher.ExtClassLoader实现
	负责将＜JAVA_HOME＞\lib\ext目录中和-Djava.ext.dir系统变量所指定的路径中的所有类库加载到虚拟机
	开发者可以直接使用扩展类加载器。

应用程序类加载器（Application ClassLoader）：
	这个类加载器由sun.misc.Launcher.AppClassLoader实现。
	由于这个类加载器是ClassLoader中的getSystemClassLoader()方法的返回值，所以一般也称它为系统类加载器。
	它负责加载用户类路径java -classpath和-D java.class.path所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。

自定义类加载器（User ClassLoader）：


加载机制：
	1、全盘负责：当某个加载器负责加载Class时，该Class所依赖的或者引用的Class也将由该加载器加载。除非显示指定。
	2、双亲委托（重点的双亲委派机制）：加载Class之前，先委托父类加载器加载，如果父类加载器无法加载，才自己加载。
	3、缓存机制：所有被加载的Class都会被缓存。这就是为什么修改了Class后需要重启虚拟机。
